-- Autocompletion in neovim
-- Generated by Gemini

return {
  "hrsh7th/nvim-cmp",
  event = "InsertEnter", -- Only load when entering Insert mode for performance
  dependencies = {
    -- Required sources
    "hrsh7th/cmp-nvim-lsp", -- LSP source
    "hrsh7th/cmp-buffer",   -- Buffer words source
    "hrsh7th/cmp-path",     -- File path source
    "saadparwaiz1/cmp_luasnip", -- Snippet source for luasnip

    -- Snippet engine (highly recommended for `nvim-cmp`)
    "L3MON4D3/LuaSnip",
    -- Optional: for nice icons in completion menu
    "onsails/lspkind.nvim",
  },
  config = function()
    local cmp = require("cmp")
    local luasnip = require("luasnip")
    local lspkind = require("lspkind") -- Optional: for icons

    -- Setup LuaSnip
    luasnip.setup({})

    cmp.setup({
      -- Completion menu settings
      completion = {
        completeopt = "menu,menuone,noinsert", -- Shows a menu, selects first item if only one, doesn't auto-insert
      },
      -- Keybindings for the completion menu
      mapping = cmp.mapping.preset.insert({
        ["<C-p>"] = cmp.mapping.scroll_docs(-4), -- Scroll backward in documentation window
        ["<C-n>"] = cmp.mapping.scroll_docs(4),  -- Scroll forward in documentation window
        ["<C-Space>"] = cmp.mapping.complete(),  -- Trigger completion menu
        ["<C-e>"] = cmp.mapping.abort(),         -- Abort completion
        ["<CR>"] = cmp.mapping.confirm({ select = true }), -- Confirm selection. `select = true` will auto-select if only one item.
        -- Snippet expansion and jump
        ["<Tab>"] = cmp.mapping(function(fallback)
          if cmp.visible() then
            cmp.select_next_item() -- Select next item in completion menu
          elseif luasnip.expand_or_jumpable() then
            luasnip.expand_or_jump() -- Expand a snippet or jump to next placeholder
          else
            fallback() -- Fallback to default Tab behavior
          end
        end, { "i", "s" }), -- Apply in Insert and Select mode
        ["<S-Tab>"] = cmp.mapping(function(fallback)
          if cmp.visible() then
            cmp.select_prev_item() -- Select previous item in completion menu
          elseif luasnip.jumpable(-1) then
            luasnip.jump(-1) -- Jump to previous snippet placeholder
          else
            fallback() -- Fallback to default Shift-Tab behavior
          end
        end, { "i", "s" }),
      }),
      -- Sources for completion
      sources = cmp.config.sources({
        { name = "nvim_lsp" },  -- Provides completions from LSP servers
        { name = "luasnip" },   -- Provides completions from LuaSnip (snippets)
        { name = "buffer" },    -- Provides completions from words in the current buffer
        { name = "path" },      -- Provides completions for file paths
      }),
      -- Formatting for the completion menu
      formatting = {
        format = lspkind.cmp_format({
          -- For more customization, see `help lspkind.nvim`
          mode = "symbol_text", -- show only symbol annotations
          maxwidth = 50, -- prevent completion items from overflowing
          ellipsis_char = "...", -- when maxwidth is reached, this is used
          -- The `name` is the source name, e.g. "nvim_lsp", "buffer"
          -- You can customize how each source looks
          symbol_map = {
            Copilot = "ï„“", -- Example: if you use Copilot
          },
          -- menu = {
          --   buffer = "[Buffer]",
          --   nvim_lsp = "[LSP]",
          --   luasnip = "[Snippet]",
          --   path = "[Path]",
          -- },
        }),
      },
      -- Border around the completion menu and documentation window
      window = {
        completion = cmp.config.window.bordered(),
        documentation = cmp.config.window.bordered(),
      },
    })

    -- Set up completion for filetypes where LSP might not be available or
    -- you want buffer/path completion to be primary.
    -- For example, for markdown files, you might want only buffer and path.
    cmp.setup.cmdline(":", {
      sources = cmp.config.sources({
        { name = "path" },
        { name = "cmdline" },
      }),
    })
    cmp.setup.cmdline("/", {
      sources = cmp.config.sources({
        { name = "buffer" },
      }),
    })
  end,
}
